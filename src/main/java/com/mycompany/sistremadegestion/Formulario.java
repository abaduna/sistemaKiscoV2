/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sistremadegestion;


import com.mycompany.sistremadegestion.models.Producto;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author artur
 */
public class Formulario extends javax.swing.JFrame {

   
   
    public Formulario() {
        initComponents();
        tableModel = new DefaultTableModel(new Object[]{"Nombre", "Precio", "Código", "Cantidad","ID"}, 0);
tablaProductos.setModel(tableModel);
 txtCantidad.setText("1");
    }

private DefaultTableModel tableModel;
 private List<Producto> carrito = new ArrayList<>();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCalcular = new javax.swing.JButton();
        txtBarCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnCrearProducto = new javax.swing.JButton();
        txtResultado = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        btnBuy = new javax.swing.JButton();
        btnPlusCantidad = new javax.swing.JButton();
        txtCantidad = new javax.swing.JTextField();
        btnMenosCantidad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCalcular.setText("Buscar");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        txtBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBarCodeActionPerformed(evt);
            }
        });

        jLabel1.setText("Buscar producto");

        btnCrearProducto.setText("Crear producto");
        btnCrearProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearProductoActionPerformed(evt);
            }
        });

        txtResultado.setText("resultado");
        txtResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResultadoActionPerformed(evt);
            }
        });

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        btnBuy.setText("Comprar");
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });

        btnPlusCantidad.setText("+");
        btnPlusCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusCantidadActionPerformed(evt);
            }
        });

        txtCantidad.setText("1");
        txtCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadActionPerformed(evt);
            }
        });

        btnMenosCantidad.setText("-");
        btnMenosCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenosCantidadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(txtBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCrearProducto))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMenosCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnPlusCantidad)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnBuy)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBuy)
                        .addComponent(btnPlusCantidad)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnMenosCantidad)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalcular)
                    .addComponent(txtBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCrearProducto))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


 private void actualizarVistaCarrito() {
    double total = 0;
    StringBuilder sb = new StringBuilder();

    for (Producto p : carrito) {
        double subtotal = p.getPrecio() * p.getCantidad(); // calcular subtotal por producto
        sb.append(p.getNombre())
          .append(" x").append(p.getCantidad())
          .append(" - $")
          .append(String.format("%.2f", subtotal))
          .append("\n");
        total += subtotal;
    }

    sb.append("\nTOTAL: $").append(String.format("%.2f", total));

    // Mostrar todo en el JTextArea
    txtResultado.setText(sb.toString());

    // Además, actualizar el JTable con la lista completa
    tableModel.setRowCount(0);
    for (Producto p : carrito) {
        tableModel.addRow(new Object[]{
            p.getNombre(),
            String.format("$%.2f", p.getPrecio()),
            p.getCantidad(),
            String.format("$%.2f", p.getPrecio() * p.getCantidad()),
            p.getBarCode(),
            p.getId()
        });
    }
}



    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
     String barCode = this.txtBarCode.getText();
    String url = "jdbc:sqlite:productos.db";
    String sql = "SELECT * FROM productos WHERE codigo_barra = ?";

    try (Connection conn = DriverManager.getConnection(url);
         PreparedStatement pstmt = conn.prepareStatement(sql)) {
 String cantidadStr = this.txtCantidad.getText();
        pstmt.setString(1, barCode);
        ResultSet rs = pstmt.executeQuery();
  int cantidad = Integer.parseInt(cantidadStr);
        if (rs.next()) {
            String id = rs.getString("id");
            String nombre = rs.getString("nombre");
            double precio = rs.getDouble("precio");
            String codigoBarra = rs.getString("codigo_barra");

            // Crear producto con todos los campos
            Producto p = new Producto(nombre, precio, codigoBarra, id,cantidad);
            carrito.add(p); // Agregar al carrito

            actualizarVistaCarrito();
 // Limpiar los campos
            txtBarCode.setText("");
            txtCantidad.setText("1"); // O podés dejarlo vacío con ""
            txtBarCode.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al buscar en la base de datos.");
    }
    
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void txtBarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBarCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBarCodeActionPerformed

    private void btnCrearProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearProductoActionPerformed
        // TODO add your handling code here:
         VentanaCrearProducto nuevaVentana = new VentanaCrearProducto();
         nuevaVentana.show();
    }//GEN-LAST:event_btnCrearProductoActionPerformed

    private void txtResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResultadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResultadoActionPerformed

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        // TODO add your handling code here:
        String[] opciones = {"Tarjeta", "Efectivo", "Transferencia"};

    int seleccion = JOptionPane.showOptionDialog(
        this,
        "¿Cómo desea pagar?",
        "Método de pago",
        JOptionPane.DEFAULT_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        opciones,
        opciones[0]
    );

    if (seleccion < 0 || seleccion >= opciones.length) {
        JOptionPane.showMessageDialog(this, "No seleccionaste ningún método de pago.");
        return;
    }

    String metodoPago = opciones[seleccion];
    JOptionPane.showMessageDialog(this, "Seleccionaste pagar con: " + metodoPago);

    if (carrito.isEmpty()) {
        JOptionPane.showMessageDialog(this, "El carrito está vacío.");
        return;
    }

    Connection conn = null;
    PreparedStatement stmtCompra = null;
    PreparedStatement stmtProducto = null;
    ResultSet generatedKeys = null;

    try {
        
        conn = DriverManager.getConnection("jdbc:sqlite:productos.db");
        conn.setAutoCommit(false);

        // Fecha y hora actual
        LocalDateTime ahora = LocalDateTime.now();
        String fecha = ahora.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

        // Insertar compra
        String sqlCompra = "INSERT INTO compras (fecha, metodo_pago) VALUES (?, ?)";
        stmtCompra = conn.prepareStatement(sqlCompra, Statement.RETURN_GENERATED_KEYS);
        stmtCompra.setString(1, fecha);
        stmtCompra.setString(2, metodoPago);
        stmtCompra.executeUpdate();

        // Obtener ID de compra generada
        generatedKeys = stmtCompra.getGeneratedKeys();
        int compraId = -1;
        if (generatedKeys.next()) {
            compraId = generatedKeys.getInt(1);
        } else {
            throw new SQLException("No se pudo obtener el ID de la compra.");
        }

        // Insertar productos del carrito
        String sqlProducto = "INSERT INTO comprarProductos (compra_id, producto_id, cantidad, precio_unitario) VALUES (?, ?, ?, ?)";
        stmtProducto = conn.prepareStatement(sqlProducto);

        for (Producto p : carrito) {
            stmtProducto.setInt(1, compraId);
            stmtProducto.setString(2, p.getId());
            stmtProducto.setInt(3, p.getCantidad());
            stmtProducto.setDouble(4, p.getPrecio());
            stmtProducto.addBatch();
        }

        stmtProducto.executeBatch();
        conn.commit();

        JOptionPane.showMessageDialog(this, "Compra registrada correctamente.");
        carrito.clear(); // Limpiar el carrito después de comprar

    } catch (Exception e) {
        e.printStackTrace();
        if (conn != null) {
            try {
                conn.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        JOptionPane.showMessageDialog(this, "Error al registrar la compra: " + e.getMessage());
    } finally {
        try { if (stmtCompra != null) stmtCompra.close(); } catch (SQLException ignored) {}
        try { if (stmtProducto != null) stmtProducto.close(); } catch (SQLException ignored) {}
        try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
    }
    }//GEN-LAST:event_btnBuyActionPerformed

    private void btnPlusCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusCantidadActionPerformed
        // TODO add your handling code here:ç
       String cantidadStr = this.txtCantidad.getText();
    
    try {
        int cantidad = Integer.parseInt(cantidadStr);
        cantidad++; // Incrementa en 1
        this.txtCantidad.setText(String.valueOf(cantidad)); // Actualiza el campo con el nuevo valor
    } catch (NumberFormatException e) {
        // Si el texto no es un número, se puede manejar el error
        this.txtCantidad.setText("1"); // Por ejemplo, reinicia a 1
    }
    }//GEN-LAST:event_btnPlusCantidadActionPerformed

    private void txtCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadActionPerformed

    private void btnMenosCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenosCantidadActionPerformed
        // TODO add your handling code here:
         String cantidadStr = this.txtCantidad.getText();
    
    try {
        int cantidad = Integer.parseInt(cantidadStr);
        if (cantidad > 1) {
            cantidad--; // Resta uno si es mayor a 1
            this.txtCantidad.setText(String.valueOf(cantidad));
        }
        // Si es 1 o menor, no hace nada
    } catch (NumberFormatException e) {
        // Si el valor no es numérico, lo dejamos en 1
        this.txtCantidad.setText("1");
    }
    }//GEN-LAST:event_btnMenosCantidadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnCrearProducto;
    private javax.swing.JButton btnMenosCantidad;
    private javax.swing.JButton btnPlusCantidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField txtBarCode;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtResultado;
    // End of variables declaration//GEN-END:variables
}
